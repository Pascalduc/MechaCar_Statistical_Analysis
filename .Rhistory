t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven))
# two-sample t-test when the population mean is not available
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
#compare means of two samples
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven))
# two-sample t-test when the population mean is not available
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
#compare means of two samples
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven))
# two-sample t-test when the population mean is not available
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
#compare means of two samples
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven))
# two-sample t-test when the population mean is not available
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
#compare means of two samples
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven))
# two-sample t-test when the population mean is not available
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
#compare means of two samples
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven))
# two-sample t-test when the population mean is not available
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
#compare means of two samples
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven))
# two-sample t-test when the population mean is not available
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
#compare means of two samples
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven))
# two-sample t-test when the population mean is not available
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
#compare means of two samples
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven))
# two-sample t-test when the population mean is not available
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
#compare means of two samples
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven))
# two-sample t-test when the population mean is not available
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
#compare means of two samples
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven))
# two-sample t-test when the population mean is not available
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
#compare means of two samples
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven))
# two-sample t-test when the population mean is not available
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
#compare means of two samples
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven))
# two-sample t-test when the population mean is not available
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
#compare means of two samples
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven))
# two-sample t-test when the population mean is not available
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
#compare means of two samples
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven))
# two-sample t-test when the population mean is not available
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
#compare means of two samples
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven))
# two-sample t-test when the population mean is not available
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
#compare means of two samples
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven))
# two-sample t-test when the population mean is not available
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
#compare means of two samples
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven))
# two-sample t-test when the population mean is not available
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
#compare means of two samples
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven))
# two-sample t-test when the population mean is not available
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
#compare means of two samples
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven))
# two-sample t-test when the population mean is not available
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
#compare means of two samples
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven))
# two-sample t-test when the population mean is not available
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
#compare means of two samples
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven))
# two-sample t-test when the population mean is not available
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
#compare means of two samples
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven))
# two-sample t-test when the population mean is not available
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
#compare means of two samples
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven))
# two-sample t-test when the population mean is not available
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
#compare means of two samples
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven))
# two-sample t-test when the population mean is not available
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
#compare means of two samples
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven))
# two-sample t-test when the population mean is not available
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
#compare means of two samples
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven))
# two-sample t-test when the population mean is not available
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
#compare means of two samples
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven))
# two-sample t-test when the population mean is not available
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
#compare means of two samples
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven))
# two-sample t-test when the population mean is not available
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
#compare means of two samples
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven))
# two-sample t-test when the population mean is not available
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
#compare means of two samples
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven))
# two-sample t-test when the population mean is not available
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
#compare means of two samples
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven))
# two-sample t-test when the population mean is not available
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
#compare means of two samples
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven))
# two-sample t-test when the population mean is not available
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
#compare means of two samples
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven))
# two-sample t-test when the population mean is not available
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
#compare means of two samples
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven))
# two-sample t-test when the population mean is not available
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
#compare means of two samples
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven))
#compare sample versus population means using t.test() function
?t.test()
# practice paired-t-test with mpg_modified.csv
#import dataset
mpg_data <- read.csv('mpg_modified.csv')
View(mpg_data)
#select only data points where the year is 1999
mpg_1999 <- mpg_data %>% filter(year==1999)
#select only data points where the year is 2008
mpg_2008 <-  mpg_data %>% filter(year==2008)
View(mpg_1999)
View(mpg_2008)
#compare the mean difference between two samples 1999 vs 2008 for fuel efficiency
t.test(mpg_1999$hwy,mpg_2008$hwy,paired = T)
#import dataset into ggplot2
plt <- ggplot(mpg_1999,aes(x=log10(hwy)))
#visualize distribution using density plot
plt + geom_density()
#import dataset into ggplot2
plt <- ggplot(mpg_1999,aes(x=(hwy)))
#visualize distribution using density plot
plt + geom_density()
#import dataset into ggplot2
plt <- ggplot(mpg_2008,aes(x=(hwy)))
#visualize distribution using density plot
plt + geom_density()
#import dataset into ggplot2
plt <- ggplot(mpg_2008,aes(x=(cty)))
#visualize distribution using density plot
plt + geom_density()
#import dataset into ggplot2
plt <- ggplot(mpg_2008,aes(x=log10(cty)))
#visualize distribution using density plot
plt + geom_density()
#import dataset into ggplot2
plt <- ggplot(mpg_1999,aes(x=log10(cty)))
#visualize distribution using density plot
plt + geom_density()
#compare the mean difference between two samples 1999 vs 2008 for fuel efficiency
t.test(mpg_1999$cty,mpg_2008$cty,paired = T)
hwy
#compare the mean difference between two samples 1999 vs 2008 for fuel efficiency
t.test(mpg_1999$hwy,mpg_2008$hwy,paired = T)
# ANOVA
?aov()
#filter columns from mtcars dataset
mtcars_filt <- mtcars[,c('hp','cyl')]
View(mtcars_filt)
#convert numeric column to factor
mtcars_filt$cyl <- factor(mtcars_filt$cyl)
#filter columns from mtcars dataset
mtcars_filt <- mtcars[,c('hp','cyl')]
#convert numeric column to factor
mtcars_filt$cyl <- factor(mtcars_filt$cyl)
#compare means across multiple levels
aov(hp ~ cyl,data=mtcars)
#compare means across multiple levels
aov(hp ~ cyl,data=mtcars_filt)
#need to wrap in summary to get p-value
summary(aov(hp ~ cyl,data=mtcars_filt))
#need to wrap in summary to get p-value
summary(aov(hp ~ cyl,data=mtcars))
_filt
#need to wrap in summary to get p-value
summary(aov(hp ~ cyl,data=mtcars_filt))
# correlation function
?cor()
head(mtcars)
# test whether or not horsepower (hp) is correlated with quarter-mile race time (qsec)
#import dataset into ggplot2
plt <- ggplot(mtcars,aes(x=hp,y=qsec))
# test whether or not horsepower (hp) is correlated with quarter-mile race time (qsec)
#import dataset into ggplot2
plt <- ggplot(mtcars,aes(x=hp,y=qsec))
#create scatter plot
plt + geom_point()
#calculate correlation coefficient
cor(mtcars$hp,mtcars$qsec)
head(used_cars)
head(used_cars)
# try another example of correlation #read in dataset
used_cars <- read.csv('used_car_data.csv',stringsAsFactors = F)
head(used_cars)
#import dataset into ggplot2
plt <- ggplot(used_cars,aes(x=Miles_Driven,y=Selling_Price))
#create a scatter plot
plt + geom_point()
#calculate correlation coefficient
cor(used_cars$Miles_Driven,used_cars$Selling_Price)
#instead of checking each pair - convert data frame into numeric matrix
used_matrix <- as.matrix(used_cars[,c("Selling_Price","Present_Price","Miles_Driven")])
View(used_cars)
View(used_matrix)
cor(used_matrix)
# linear regression
?lm()
# test whether or not quarter-mile race time (qsec) can be predicted using a linear model and horsepower (hp)
#create linear model
lm(qsec ~ hp,mtcars)
# test whether or not quarter-mile race time (qsec) can be predicted using a linear model and horsepower (hp)
#create linear model
lm(qsec ~ hp,mtcars)
summarize(lm(qsec ~ hp,mtcars) )
summarize(lm(qsec ~ hp,mtcars))
summary(lm(qsec ~ hp,mtcars))
model <- lm(qsec ~ hp,mtcars)
yvals <- model$coefficients['hp']*mtcars$hp +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
#import dataset into ggplot2
plt <- ggplot(mtcars,aes(x=hp,y=qsec))
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
#generate multiple linear regression model
lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars)
#generate summary statistics
summary(lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars))
# chi-squared
?chisq.test()
#generate contingency table
table(mpg$class,mpg$year)
#compare categorical distributions
chisq.test(tbl)
table(mpg$class,mpg$year)
#compare categorical distributions
chisq.test(tbl)
#generate contingency table
tbl <- table(mpg$class,mpg$year)
#compare categorical distributions
chisq.test(tbl)
#generate contingency table
tbl <- table(mpg$class,mpg$year)
#compare categorical distributions
chisq.test(tbl)
#generate contingency table
table(mpg$class,mpg$year)
#generate contingency table
tbl <- table(mpg$class,mpg$year)
#compare categorical distributions
chisq.test(tbl)
setwd("C:/Users/pasca/OneDrive - UHN/BootCamp Data Analytics/Module_15_R/MechaCar_Statistical_Analysis")
# load library dplyr
library(dplyr)
# import and read MechaCar_mpg.csv
mechacar_mpg <- read.csv('MechaCar_mpg.csv', check.names = F, stringsAsFactors = F)
View(mechacar_mpg)
# linear regression for all 6 variables
?lm()
# linear regression for all 6 variables
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mechacar_mpg)
# summary of linear regression
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mechacar_mpg))
# visualize linear regression
# import dataset to ggplot
plt <- ggplot(mechacar_mpg,aes(x=mpg,y=vehicle_lenght))
plt + geom_point()
# visualize linear regression
# import dataset to ggplot
plt <- ggplot(mechacar_mpg,aes(x=mpg,y=vehicle_length))
# visualize linear regression
# import dataset to ggplot
plt <- ggplot(mechacar_mpg,aes(x=mpg,y=vehicle_length))
plt + geom_point()
# check vehicle_length
plt <- ggplot(mechacar_mpg,aes(x=mpg,y=vehicle_weight))
plt + geom_point()
# check spoiler_angle p-value 0.3
plt <- ggplot(mechacar_mpg,aes(x=mpg,y=spoiler_angle))
plt + geom_point()
# check spoiler_angle p-value 0.3
plt <- ggplot(mechacar_mpg,aes(x=mpg,y=ground_clearance))
plt + geom_point()
# check spoiler_angle p-value 0.3
plt <- ggplot(mechacar_mpg,aes(x=mpg,y=ground_clearance))
plt + geom_point()
# check spoiler_angle p-value 0.3
plt <- ggplot(mechacar_mpg,aes(x=mpg,y=spoiler_angle))
plt + geom_point()
# confirm linear regression with visualization
# check vehicle_length ***
plt <- ggplot(mechacar_mpg,aes(x=mpg,y=vehicle_length))
plt + geom_point()
# check spoiler_angle p-value 0.3
plt <- ggplot(mechacar_mpg,aes(x=mpg,y=ground_clearance))
plt + geom_point()
# check spoiler_angle p-value 0.3
plt <- ggplot(mechacar_mpg,aes(x=mpg,y=spoiler_angle))
plt + geom_point()
# confirm linear regression with visualization
# check vehicle_length ***
#create linear model
model <- lm(mpg ~ vehicle_length,mechacar_mpg)
yvals <- model$coefficients['vehicle_length']*mechacar_mpg$vehicle_length +
model$coefficients['(Intercept)']
yvals <- model$coefficients['vehicle_length']*mechacar_mpg$vehicle_length +
model$coefficients['(Intercept)']
plt <- ggplot(mechacar_mpg,aes(x=mpg,y=vehicle_length))
plt + geom_point()
plt + geom_point() + geom_line(aes(y=yvals), color = "red")
# load library dplyr
library(dplyr)
# load library dplyr
library(dplyr)
# import and read MechaCar_mpg.csv
mechacar_mpg <- read.csv('MechaCar_mpg.csv', check.names = F, stringsAsFactors = F)
# linear regression for all 6 variables
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mechacar_mpg)
# summary of linear regression
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mechacar_mpg))
model <- lm(mpg ~ vehicle_length,mechacar_mpg)
yvals <- model$coefficients['vehicle_length']*mechacar_mpg$vehicle_length +
model$coefficients['(Intercept)']
View(model)
View(model)
plt <- ggplot(mechacar_mpg,aes(x=mpg,y=vehicle_length))
plt + geom_point() + geom_line(aes(y=yvals), color = "red")
lm(qsec ~ hp,mtcars)
summary(lm(qsec ~ hp,mtcars))
model <- lm(qsec ~ hp,mtcars)
yvals <- model$coefficients['hp']*mtcars$hp +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
View(model)
#import dataset into ggplot2
plt <- ggplot(mtcars,aes(x=hp,y=qsec))
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
#create linear model
model <- lm(mpg ~ vehicle_length,mechacar_mpg)
yvals <- model$coefficients['vehicle_length']*mechacar_mpg$vehicle_length +
model$coefficients['(Intercept)']
plt <- ggplot(mechacar_mpg,aes(x=mpg,y=vehicle_length))
plt + geom_point() + geom_line(aes(y=yvals), color = "red")
plt <- ggplot(mechacar_mpg,aes(x=mpg,y=vehicle_length))
plt + geom_point()
head(mtcars)
model <- lm(qsec ~ hp,mtcars)
yvals <- model$coefficients['hp']*mtcars$hp +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
plt <- ggplot(mtcars,aes(x=hp,y=qsec))
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
model <- lm(mpg ~ vehicle_length,mechacar_mpg)
yvals <- model$coefficients['mpg']*mechacar_mpg$mpg +
model$coefficients['(Intercept)']
plt <- ggplot(mechacar_mpg,aes(x=mpg,y=vehicle_length))
plt + geom_point() + geom_line(aes(y=yvals), color = "red")
View(model)
model <- lm(mpg ~ vehicle_length,mechacar_mpg)
yvals <- model$coefficients['vehicle_length']*mechacar_mpg$vehicle_length +
model$coefficients['(Intercept)']
plt <- ggplot(mechacar_mpg,aes(x=mpg,y=vehicle_length))
plt + geom_point() + geom_line(aes(y=yvals), color = "red")
plt <- ggplot(mechacar_mpg,aes(x=mpg,y=vehicle_length))
plt + geom_point()
# linear regression for all 6 variables
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mechacar_mpg)
# summary of linear regression
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mechacar_mpg))
?lm()
# check vehicle_length ***
plt <- ggplot(mechacar_mpg,aes(x=mpg,y=vehicle_length))
plt + geom_point()
plt <- ggplot(mechacar_mpg,aes(x=mpg,y=vehicle_weight))
plt + geom_point()
plt <- ggplot(mechacar_mpg,aes(x=mpg,y=spoiler_angle))
plt + geom_point()
# check ground_clearance p-value ***
plt <- ggplot(mechacar_mpg,aes(x=mpg,y=ground_clearance))
plt + geom_point()
# confirm linear regression with visualization
# check vehicle_length - positive correlation ***
cor(mechacar_mpg$mpg,mechacar_mpg$vehicle_length)
# check vehicle_weight p-value 0.078
cor(mechacar_mpg$mpg,mechacar_mpg$vehicle_weight) # 0.61
# check spoiler_angle p-value 0.3
cor(mechacar_mpg$mpg,mechacar_mpg$spoiler_angle) # cor = 0.09
# import and read Suspension_Coil.csv
Suspension_Coil <- read.csv('Suspension_Coil.csv', check.names = F, stringsAsFactors = F)
View(Suspension_Coil)
# summary table
total_summary <- Suspension_Coil %>% summarize(Mean=mean(PSI), Median=median(PSI), Variance=var(PSI), SD=sd(PSI), .groups = 'keep')
View(total_summary)
# summary table grouped by lot
lot_summary <- Suspension_Coil %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI), Median=median(PSI), Variance=var(PSI), SD=sd(PSI), .groups = 'keep')
View(lot_summary)
# summary table of PSI column
total_summary <- Suspension_Coil %>% summarize(Mean=mean(PSI), Median=median(PSI), Variance=var(PSI), SD=sd(PSI), Min=Min(PSI), Max=Max(PSI), .groups = 'keep')
# summary table of PSI column
total_summary <- Suspension_Coil %>% summarize(Mean=mean(PSI), Median=median(PSI), Variance=var(PSI), SD=sd(PSI), Min=min(PSI), Max=max(PSI), .groups = 'keep')
# summary table grouped by lot
lot_summary <- Suspension_Coil %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI), Median=median(PSI), Variance=var(PSI), SD=sd(PSI), Min=min(PSI), Max=max(PSI), .groups = 'keep')
#t-test for all manufacturing lots
t.test(SuspensionData$PSI, mu=1500)
#t-test for all manufacturing lots
t.test(SuspensionData$PSI, mu=1500)
# load library dplyr
library(dplyr)
# import and read MechaCar_mpg.csv
mechacar_mpg <- read.csv('MechaCar_mpg.csv', check.names = F, stringsAsFactors = F)
# linear regression for all 6 variables
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mechacar_mpg)
# summary of linear regression
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mechacar_mpg))
# import and read Suspension_Coil.csv
Suspension_Coil <- read.csv('Suspension_Coil.csv', check.names = F, stringsAsFactors = F)
# summary table of PSI column
total_summary <- Suspension_Coil %>% summarize(Mean=mean(PSI), Median=median(PSI), Variance=var(PSI), SD=sd(PSI), .groups = 'keep')
# summary table grouped by lot
lot_summary <- Suspension_Coil %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI), Median=median(PSI), Variance=var(PSI), SD=sd(PSI), .groups = 'keep')
#t-test for all manufacturing lots
t.test(SuspensionData$PSI, mu=1500)
#t-test for all manufacturing lots
t.test(Suspension_Coil$PSI, mu=1500)
#t-test for lot 1
t.test(subset(Suspension_Coil$PSI, Suspension_Coil$Manufacturing_Lot == "Lot1"), mu=1500)
#t-test for lot 2
t.test(subset(Suspension_Coil$PSI, Suspension_Coil$Manufacturing_Lot == "Lot2"), mu=1500)
#t-test for lot 3
t.test(subset(Suspension_Coil$PSI, Suspension_Coil$Manufacturing_Lot == "Lot3"), mu=1500)
#compare sample versus population means using t.test() function
?t.test()
t.test(log10(sample_table$Miles_Driven),mu=mean(log10(population_table$Miles_Driven)))
#t-test for all manufacturing lots
t.test(Suspension_Coil$PSI, mu=1500)
#t-test for lot 1
t.test(subset(Suspension_Coil$PSI, Suspension_Coil$Manufacturing_Lot == "Lot1"), mu=1500)
#t-test for lot 2
t.test(subset(Suspension_Coil$PSI, Suspension_Coil$Manufacturing_Lot == "Lot2"), mu=1500)
#t-test for lot 3
t.test(subset(Suspension_Coil$PSI, Suspension_Coil$Manufacturing_Lot == "Lot3"), mu=1500)
#filter columns from mtcars dataset
mtcars_filt <- mtcars[,c('hp','cyl')]
#convert numeric column to factor
mtcars_filt$cyl <- factor(mtcars_filt$cyl)
#compare means across multiple levels
aov(hp ~ cyl,data=mtcars_filt)
#need to wrap in summary to get p-value
summary(aov(hp ~ cyl,data=mtcars_filt))
# ANOVA
?aov()
